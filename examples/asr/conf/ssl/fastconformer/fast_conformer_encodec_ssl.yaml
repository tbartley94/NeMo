# This config contains the default values for self-supervised pre-training of a Conformer ASR model, large size (~120M).

# Architecture and training config:
# Default learning parameters in this config are set for effective batch size of 2K. To train it with smaller effective
# batch sizes, you may need to re-tune the learning parameters or use higher accumulate_grad_batches.
# Here are the recommended configs for different variants of Conformer-CTC, other parameters are the same as in this config file.
# One extra layer (compared to original paper) is added to the medium and large variants to compensate for replacing the LSTM decoder with a linear one.
#
#  +-------------+---------+---------+----------+------------+-----+
#  | Model       | d_model | n_heads | n_layers | time_masks | lr  |
#  +=============+=========+========+===========+============+=====+
#  | Small  (13M)|   176   |    4   |    16     |     5      | 5.0 |
#  +-------------+---------+--------+-----------+------------+-----+
#  | Medium (30M)|   256   |    4   |    18     |     5      | 5.0 |
#  +-------------+---------+--------+-----------+------------+-----+
#  | Large (121M)|   512   |    8   |    18     |     10     | 2.0 |
#  +---------------------------------------------------------------+
#
# If you do not want to train with AMP, you may use weight decay of 0.0 or reduce the number of time maskings to 2
# with time_width=100. It may help when you want to train for fewer epochs and need faster convergence.
# With weight_decay=0.0, learning rate may need to get reduced to 2.0.

name: "Fast-Conformer-SSL-MLM-EnCodec"

model:
  sample_rate: 16000
  skip_nan_grad: false
  decoder_out: 256

  model_defaults:
    enc_hidden: ${model.encoder.d_model}
    audio_type: 'codes'
    codebook_size: 1024
    n_codebooks_to_use: 8
    n_decoders_to_use: 8


  train_ds:
    manifest_filepath: "/home/tbartley/Documents/intern_proj/manifests/train_clean_100_encoded.json"
    codebook_size: ${model.model_defaults.codebook_size}
    audio_type: ${model.model_defaults.audio_type}
    n_codebooks_to_use: ${model.model_defaults.n_codebooks_to_use}
    sample_rate: ${model.sample_rate}
    batch_size: 64 # you may increase batch_size if your memory allows
    shuffle: true
    num_workers: 8
    pin_memory: true
    max_duration: 16.7 # it is set for LibriSpeech, you may need to update it for your dataset
    min_duration: 6.0
    # tarred datasets
    is_tarred: false
    tarred_audio_filepaths: null
    shuffle_n: 2048
    # bucketing params
    bucketing_strategy: "fully_randomized"
    bucketing_batch_size: null

  validation_ds:
    manifest_filepath: [/home/tbartley/Documents/intern_proj/manifests/dev_clean_encoded.json,/home/tbartley/Documents/intern_proj/manifests/dev_clean_encoded.json]
    audio_type: ${model.model_defaults.audio_type}
    codebook_size: ${model.model_defaults.codebook_size}
    n_codebooks_to_use: ${model.model_defaults.n_codebooks_to_use}
    sample_rate: ${model.sample_rate}
    min_duration: 6.0
    batch_size: 64
    shuffle: false
    use_start_end_token: false
    num_workers: 8
    pin_memory: true

  preprocessor:
    _target_: nemo.collections.asr.modules.AudioCodeToEmbeddingPreprocessor
    codebook_size: ${model.model_defaults.codebook_size}
    n_codebooks_to_use: ${model.model_defaults.n_codebooks_to_use}
    embedding_dim: 128
    pad_to: 8
    embedding_out_dim: 128
    codebook_aggregation: 'sum'    # how to organize if more than one codebook is used.
    padding_idx: 8192   # default is "codebook_size * n_codebooks_to_use"
    #init_from_encodec: /home/tbartley/Documents/intern_proj/checkpoints/encodec_24khz-d7cc33bc.th
    #freeze: false

  spec_augment:
    _target_: nemo.collections.asr.modules.MaskedPatchAugmentation
    freq_masks: 0
    freq_width: 0
    patch_size: 48
    mask_patches: 0.85

  encoder:
    _target_: nemo.collections.asr.modules.ConformerEncoder
    feat_in: ${model.preprocessor.embedding_out_dim}
    feat_out: -1 # you may set it if you need different output size other than the default d_model.
    n_layers: 18
    d_model: 512

    # Sub-sampling params
    subsampling: dw_striding # vggnet, striding, stacking or stacking_norm, dw_striding
    subsampling_factor: 8 # must be power of 2 for striding and vggnet
    subsampling_conv_channels: 256 # -1 sets it to d_model
    causal_downsampling: false

    # Feed forward module's params
    ff_expansion_factor: 4

    # Multi-headed Attention Module's params
    self_attention_model: rel_pos # rel_pos or abs_pos
    n_heads: 8 # may need to be lower for smaller d_models
    # [left, right] specifies the number of steps to be seen from left and right of each step in self-attention
    att_context_size: [-1, -1] # -1 means unlimited context
    att_context_style: regular # regular or chunked_limited
    xscaling: true # scales up the input embeddings by sqrt(d_model)
    untie_biases: true # unties the biases of the TransformerXL layers
    pos_emb_max_len: 5000

    # Convolution module's params
    conv_kernel_size: 9
    conv_norm_type: 'batch_norm' # batch_norm or layer_norm or groupnormN (N specifies the number of groups)
    # conv_context_size can be"causal" or a list of two integers while conv_context_size[0]+conv_context_size[1]+1==conv_kernel_size
    # null means [(kernel_size-1)//2, (kernel_size-1)//2], and 'causal' means [(kernel_size-1), 0]
    conv_context_size: null

    ### regularization
    dropout: 0.1 # The dropout used in most of the Conformer Modules
    dropout_pre_encoder: 0.1 # The dropout used before the encoder
    dropout_emb: 0.0 # The dropout used for embeddings
    dropout_att: 0.1 # The dropout for multi-headed attention modules

    # set to non-zero to enable stochastic depth
    stochastic_depth_drop_prob: 0.0
    stochastic_depth_mode: linear  # linear or uniform
    stochastic_depth_start_layer: 1

  decoder:
    _target_: nemo.collections.asr.modules.ConvASRDecoderReconstruction
    feat_in: ${model.encoder.d_model}
    feat_hidden: ${model.decoder_out}
    # features in hidden layer of decoder
    feat_out: ${model.decoder_out}
    stride_layers: 3
    kernel_size: 3
    # if loss.combine_time_steps is less than the encoder stride, then a corresponding amount of stride_layers needs to
    # be added to the decoder (here stride and combine_time_steps are both 4)
    non_stride_layers: 0

  loss:
    _target_: nemo.collections.asr.losses.MLMLoss


  optim:
    name: adamw
    lr: 2.0
    # optimizer arguments
    betas: [0.9, 0.98]
    weight_decay: 1e-3

    # scheduler setup
    sched:
      name: NoamAnnealing
      d_model: ${model.encoder.d_model}
      # scheduler config override
      warmup_steps: null
      warmup_ratio: 0.1
      min_lr: 1e-6

trainer:
  devices: -1 # number of GPUs, -1 would use all available GPUs
  num_nodes: 1
  max_epochs: 1000
  max_steps: -1 # computed at runtime if not set
  val_check_interval: 0.001 # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
  accelerator: auto
  strategy: ddp
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  precision: 32 # 16, 32, or bf16
  log_every_n_steps: 10  # Interval of logging.
  enable_progress_bar: True
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  num_sanity_val_steps: 10 # number of steps to perform validation steps for sanity check the validation process before starting the training, setting to 0 disables it
  check_val_every_n_epoch: 1 # number of evaluations on validation every n epochs
  sync_batchnorm: true
  enable_checkpointing: False # Provided by exp_manager
  logger: false  # Provided by exp_manager
  benchmark: false # needs to be false for models with variable-length speech input as it slows down training

exp_manager:
  exp_dir: null
  name: ${name}
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  checkpoint_callback_params:
    # in case of multiple validation sets, first one is used
    monitor: "val_loss"
    mode: "min"
    save_top_k: 5

  # you need to set these two to True to continue the training
  resume_if_exists: false
  resume_ignore_no_checkpoint: false

  # You may use this section to create a W&B logger
  create_wandb_logger: false
  wandb_logger_kwargs:
    name: null
    project: null
